<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">

   <style>
   body{
     font-family: sans-serif;
     margin: 30px;
   }

#title{
  font-size: 35px;
  font-family: sans-serif;
}

#selected{
  font-size: 20px;
  font-family: sans-serif;
}
   svg{                                  /*3000*3000 +map*/
     /*border: 1px solid black;*/
     background-color: white;
   }

   .padistrict{
     fill: #f00;
   }

   div.tooltip{
     position: absolute;
     text-align: center;
     width: 300px;
     height: 120px;
     padding: 10px;
     font-size: 20px;
     background: lightsteelblue;
     border: 0px;
     border-radius: 50px;
     pointer-events: none;
   }

   path:hover{
     stroke: white;
     stroke-width: 1px;
     fill-opacity: .7;
   }

   .legendTitle{
     font-size: 20px;
   }

   rect{
     stroke: black;
     stroke-width: 2px;
   }
   /*.caption{
     font-weight: bold;
   }
   .key path {
     display: none;
   }

   .key line {
     stroke: #000;
     shape-rendering: crispEdges;
   }*/
   </style>
  </head>
  <p id="title"><b>Percentage of full time teacher in Pennsylvania School Districts</b></p>
<p id="selected">Year selected: <b><%= @year %></b></p>
<body>
  <div id="graph"></div>
<script>
console.log("HERE");
  var array =[];
  <% if (@fullTime) %>
  <%= districts =@fullTime.keys %>
    <% districts.each do |d|%>
      array[<%= d %>] = <%= @fullTime[d] %>;
      <% end %>
  <%end %>

  var width =3000,
      height =3000;

  var div = d3.select("body").append("div")
      .attr("class", "tooltip")
      .style("opacity", 0);

  var svg = d3.select("#graph").append("svg")
      .attr("width", width)
      .attr("height", height)
      .call(d3.zoom()
              .translateExtent([[-100, -100], [width + 90, height + 100]])
              .on("zoom", function (){
                svg.attr("transform", d3.event.transform);
              }))
      .append("g");

  var projection = d3.geoMercator()
    .scale(6500)
    .translate([width/2+8050, height/2+3900]);

  var path = d3.geoPath()
    .projection(projection);

    var color = d3.scaleThreshold()
                  .domain([55, 60, 65, 70, 75, 80, 85, 90, 95, 100])
                  .range(["#ffffff", "#e5ffe5", "#b2ffb2", "#7fff7f", "#4cff4c", "#00e500", "#00b200", "#007f00" ,"#004c00", "#000000"]);

  d3.json("/pa.json", function(error,pa){
    if (error) return console.error(error);
      console.log(pa);
      svg.selectAll(".padistrict")
          .data(topojson.feature(pa, pa.objects.padistricts).features)
          .enter().append("path")
          .attr("class", function(d) {return "padistrict " + "id"+d.id; })
                .attr("d", path) //as "d" attribute, we set the path of the feature
                .style("fill", function(d){ return color(array[d.properties.aun]); })
                .on("mouseover", function(d) {
                  div.transition()
                      .duration(200)
                      .style("opacity", .9);
                      var currentSchool =d.properties.name;
                      var currentAUN =d.properties.aun;
                      var fullTimeRate =array[d.properties.aun];
                      console.log(currentSchool +", " +currentAUN +", " +fullTimeRate);
             div.html(d.properties.name + "<br/>" +"Full Time Teacher Percentage: " +fullTimeRate)
                 .style("left", (d3.event.pageX) + "px")
                 .style("top", (d3.event.pageY - 28) + "px");
         })
         .on("mouseout", function(d) {
             div.transition()
                 .duration(500)
                 .style("opacity", 0);
         })
  });


  var defs =svg.append("defs");
  var linearGradient =defs.append("linearGradient")
                         .attr("id", "linear-gradient");
  linearGradient.attr("x1", "0%").attr("y1", "0%")
                .attr("x2", "100%").attr("y2", "0%");
  linearGradient.append("stop")
                .attr("offset", "0%")
                 .attr("stop-color", "#ffffff");

  linearGradient.append("stop")
                .attr("offset", "100%")
                .attr("stop-color", "#000000");

  svg.append("rect")
    .attr("class", "legendRect")
    .attr("x", 450).attr("y", 570)
    .attr("width", 500)
    .attr("height", 20)
    .style("fill", "url(#linear-gradient)");

  svg.append("text")
      .attr("class", "legendTitle")
      .attr("x", 550).attr("y", 560)
      .text("Full Time Teacher Percentage");

  var domain =[55, 60, 65, 70, 75, 80, 85, 90, 95, 100];
  var label =["55", "60", "65", "70", "75", "80", "85", "90", "95","100"];

  var legend = svg.selectAll("g.legend")
  .data(domain)
  .enter().append("g")
  .attr("class", "legend");

  legend.append("text")
                .attr("x", function(d, i){ return (450 +i*55);})
                .attr("y", 620)
                .text(function(d, i){return label[i]; });

  </script>
  </body>
</html>
